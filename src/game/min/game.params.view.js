const constructStart={namespaced:true,state:{chargingConstruct:undefined,chargingPower:0,isToolCharmUsed:false,dice:[undefined,undefined],diceBox:[undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined],tryTimes:0},mutations:{incChargingPower:(state,n)=>state.chargingPower+=n,setIsToolCharmUsed:(state,b)=>state.isToolCharmUsed=b,setChargingConstruct:(state,b)=>state.chargingConstruct=b,setIsToolCharmUsed:(state,b)=>state.isToolCharmUsed=b,setDice:(state,nums)=>{state.dice.splice(0,1,nums[0]);state.dice.splice(1,1,nums[1])},cgDice:(state)=>{let num1=state.dice[0],num2=state.dice[1];state.dice.splice(0,1,num2);state.dice.splice(1,1,num1)},removeDice:(state)=>state.dice.splice(0,1),setDiceBox:(state,params)=>{state.diceBox.splice(params[0],1,params[1])},rstDice:(state)=>state.dice=[undefined,undefined],rstDiceBox:(state)=>state.diceBox=[undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined],incTryTimes:(state,n)=>state.tryTimes+=n,rstParams(state){state.chargingConstruct=undefined;state.chargingPower=0;state.isToolCharmUsed=false;state.dice=[undefined,undefined];state.diceBox=[undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined];state.tryTimes=0;}}};const constructConnect={namespaced:true,state:{connectingComponent:undefined,dice:[undefined,undefined],diceBox00:[undefined,undefined,undefined,undefined,undefined,undefined],diceBox01:[undefined,undefined,undefined,undefined,undefined,undefined],diceBox02:[undefined,undefined,undefined,undefined,undefined,undefined],diceBox03:[undefined,undefined,undefined,undefined,undefined,undefined],diceBox04:[undefined,undefined,undefined,undefined,undefined,undefined],diceBox05:[undefined,undefined,undefined,undefined,undefined,undefined]},mutations:{setConnectingComponent:(state,o)=>state.connectingComponent=o,setDice:(state,nums)=>{state.dice.splice(0,1,nums[0]);state.dice.splice(1,1,nums[1])},cgDice:(state)=>{let num1=state.dice[0],num2=state.dice[1];state.dice.splice(0,1,num2);state.dice.splice(1,1,num1)},removeDice:(state)=>state.dice.splice(0,1),setDiceBox:(state,params)=>{let diceBox=undefined,component=params[0];if(component==COMPONENT_NAME[0])diceBox=state.diceBox00;else if(component==COMPONENT_NAME[1])diceBox=state.diceBox01;else if(component==COMPONENT_NAME[2])diceBox=state.diceBox02;else if(component==COMPONENT_NAME[3])diceBox=state.diceBox03;else if(component==COMPONENT_NAME[4])diceBox=state.diceBox04;else if(component==COMPONENT_NAME[5])diceBox=state.diceBox05;diceBox.splice(params[1],1,params[2])},rstDice:(state)=>state.dice=[undefined,undefined],rstDiceBox:(state,component)=>{if(component==COMPONENT_NAME[0])state.diceBox00=[undefined,undefined,undefined,undefined,undefined,undefined];else if(component==COMPONENT_NAME[1])state.diceBox01=[undefined,undefined,undefined,undefined,undefined,undefined];else if(component==COMPONENT_NAME[2])state.diceBox02=[undefined,undefined,undefined,undefined,undefined,undefined];else if(component==COMPONENT_NAME[3])state.diceBox03=[undefined,undefined,undefined,undefined,undefined,undefined];else if(component==COMPONENT_NAME[4])state.diceBox04=[undefined,undefined,undefined,undefined,undefined,undefined];else if(component==COMPONENT_NAME[5])state.diceBox05=[undefined,undefined,undefined,undefined,undefined,undefined]},rstParams(state){connectingComponent=undefined;diceBox00=[undefined,undefined,undefined,undefined,undefined,undefined];diceBox01=[undefined,undefined,undefined,undefined,undefined,undefined];diceBox02=[undefined,undefined,undefined,undefined,undefined,undefined];diceBox03=[undefined,undefined,undefined,undefined,undefined,undefined];diceBox04=[undefined,undefined,undefined,undefined,undefined,undefined];diceBox05=[undefined,undefined,undefined,undefined,undefined,undefined];}}};const engineStart={namespaced:true,state:{sacrifice:0,dice:[undefined,undefined]},mutations:{incSacrifice:(state,n)=>state.sacrifice+=n,setDice:(state,num)=>{state.dice.splice(0,1,num[0]);state.dice.splice(1,1,num[1])},rstParams(state){state.sacrifice=0;state.dice=[undefined,undefined]}}};const wildernessZone={namespaced:true,state:{wilderness:undefined,beginSearch:false,toolRodUsed:false,dice:[undefined,undefined],diceBox:[undefined,undefined,undefined,undefined,undefined,undefined]},mutations:{setWilderness:(state,o)=>state.wilderness=o,setBeginSearch:(state,b)=>state.beginSearch=b,setToolRodUsed:(state,b)=>state.toolRodUsed=b,setDice:(state,nums)=>{state.dice.splice(0,1,nums[0]);state.dice.splice(1,1,nums[1])},cgDice:(state)=>{let num1=state.dice[0],num2=state.dice[1];state.dice.splice(0,1,num2);state.dice.splice(1,1,num1)},removeDice:(state)=>state.dice.splice(0,1),rstDice:(state)=>state.dice=[undefined,undefined],rstDiceBox:(state)=>state.diceBox=[undefined,undefined,undefined,undefined,undefined,undefined],setDiceBox:(state,params)=>{state.diceBox.splice(params[0],1,params[1])},rstParams(state){state.wilderness=undefined;state.beginSearch=false;state.toolRodUsed=false;state.dice=[undefined,undefined];state.diceBox=[undefined,undefined,undefined,undefined,undefined,undefined]}}};const battleZone={namespaced:true,state:{monster:undefined,toolWandUsed:false,dice:[undefined,undefined]},mutations:{setMonster:(state,o)=>state.monster=o,setToolWandUsed:(state,b)=>state.toolWandUsed=b,setDice:(state,nums)=>{state.dice.splice(0,1,nums[0]);state.dice.splice(1,1,nums[1])},cgDice:(state)=>{let num1=state.dice[0],num2=state.dice[1];state.dice.splice(0,1,num2);state.dice.splice(1,1,num1)},removeDice:(state)=>state.dice.splice(0,1),rstDice:(state)=>state.dice=[undefined,undefined],rstParams(state){state.monster=undefined;toolWandUsed=false;state.dice=[undefined,undefined]}}}