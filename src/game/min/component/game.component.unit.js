const InventoryComponentBadge={props:['itemName','twoLineToShowWidth'],data(){return{COMPONENT_NAME:COMPONENT_NAME,ZONE_COLOR:ZONE_COLOR,smallAvatarWidth:345}},computed:{com_lead:()=>inventory.state.com_lead,com_silica:()=>inventory.state.com_silica,com_wax:()=>inventory.state.com_wax,com_quartz:()=>inventory.state.com_quartz,com_silver:()=>inventory.state.com_silver,com_gum:()=>inventory.state.com_gum,getItemColor(){switch(this.itemName){case COMPONENT_NAME[0]:return ZONE_COLOR[0];case COMPONENT_NAME[1]:return ZONE_COLOR[1];case COMPONENT_NAME[2]:return ZONE_COLOR[2];case COMPONENT_NAME[3]:return ZONE_COLOR[3];case COMPONENT_NAME[4]:return ZONE_COLOR[4];case COMPONENT_NAME[5]:return ZONE_COLOR[5]}},getItemCount(){switch(this.itemName){case COMPONENT_NAME[0]:return this.com_lead;case COMPONENT_NAME[1]:return this.com_silica;case COMPONENT_NAME[2]:return this.com_wax;case COMPONENT_NAME[3]:return this.com_quartz;case COMPONENT_NAME[4]:return this.com_silver;case COMPONENT_NAME[5]:return this.com_gum}},getComponentRegion(){let region="Unknow";for(var w of wildernessSet){if(w.component==this.itemName)region=w.name}return'产自:'+region},clientWidth:()=>gp_store.state.clientWidth,showSmallAvatar(){if(this.clientWidth>=this.smallAvatarWidth)return'default';else if(this.clientWidth>=this.twoLineToShowWidth)return'small';else return'large'}},template:'<Badge :count="getItemCount" type="primary" show-zero>			<Tooltip :content="getComponentRegion" transfer>				<Avatar :size="showSmallAvatar" :style="{background: getItemColor}">{{itemName}}</Avatar>			</Tooltip">		</Badge>'};const InventoryConstructTag={props:['itemName'],data(){return{}},computed:{getConstructCharge(){if(!isConstructOwned(this.itemName))return'default';if(isConstructCharged(this.itemName))return'success';return'warning'},getConstructChargeText(){var region='unknow';for(var w of wildernessSet){if(w.construct==this.itemName)region=w.name}if(!isConstructOwned(this.itemName))return this.itemName+'尚未拥有!\n所属区域:'+region;if(isConstructCharged(this.itemName))return this.itemName+'已经拥有!\n所属区域:'+region;return this.itemName+'尚未充能!'}},methods:{getConstructDetail:getConstructDetail,showDetail(){info(app,this.itemName+' : '+this.getConstructDetail(this.itemName))},itemClicked(){this.showDetail()}},template:'<span>			<Tooltip :content="getConstructChargeText" max-width="200" transfer>				<Tag type="dot" :color="getConstructCharge">					<span @click="itemClicked">{{itemName}}</span>				</Tag>			</Tooltip">		</span>'};const InventoryTreasureTag={props:['itemName'],data(){return{}},computed:{getTreasureOwned(){if(!isTreasureOwned(this.itemName))return'default';else return'success'},getTreasureOwnedText(){var region='unknow';for(var w of wildernessSet){if(w.treasure==this.itemName)region=w.name}if(!isTreasureOwned(this.itemName))return this.itemName+'尚未拥有!\n所属区域:'+region;else return this.itemName+'已经拥有!\n所属区域:'+region}},methods:{getTreasureDetail:getTreasureDetail,showDetail(){info(app,this.itemName+' : '+this.getTreasureDetail(this.itemName))},itemClicked(){this.showDetail()}},template:'<span>			<Tooltip :content="getTreasureOwnedText" max-width="200" transfer>				<Tag type="dot" :color="getTreasureOwned" >					<span @click="itemClicked">{{itemName}}</span>				</Tag>			</Tooltip">		</span>'};const InventoryToolTag={props:['toolName'],data(){return{}},computed:{getToolCharge(){if(this.isToolCharged(this.toolName))return'success';return'warning'},getToolChargeText(){if(this.isToolCharged(this.toolName))return this.toolName+'已充能!';return this.toolName+'未充能!'}},methods:{getToolDetail:getToolDetail,isToolCharged:isToolCharged,showDetail(){info(app,this.toolName+' : '+this.getToolDetail(this.toolName))},itemClicked(){this.showDetail()}},template:'<span>			<Tooltip :content="getToolChargeText" max-width="200" transfer>				<Tag type="dot" :color="getToolCharge">					<span @click="itemClicked">{{toolName}}</span>				</Tag>			</Tooltip">		</span>'};const MapUnit={props:['wilderness'],data(){return{COMPONENT_NAME:COMPONENT_NAME,BADGE_COLOR_CLASS:BADGE_COLOR_CLASS,ZONE_COLOR:ZONE_COLOR,width1:350,width2:310}},computed:{getEvents(){let eventList='',events=this.wilderness.events;for(var e of events)eventList+=(e+"\n");if(!eventList)return"无事件";return eventList},getComponentColor(){switch(this.wilderness.component){case COMPONENT_NAME[0]:return ZONE_COLOR[0];case COMPONENT_NAME[1]:return ZONE_COLOR[1];case COMPONENT_NAME[2]:return ZONE_COLOR[2];case COMPONENT_NAME[3]:return ZONE_COLOR[3];case COMPONENT_NAME[4]:return ZONE_COLOR[4];case COMPONENT_NAME[5]:return ZONE_COLOR[5]}},getComponentNum(){let c=this.wilderness.component;if(c==COMPONENT_NAME[0])return inventory.state.com_lead;else if(c==COMPONENT_NAME[1])return inventory.state.com_silica;else if(c==COMPONENT_NAME[2])return inventory.state.com_wax;else if(c==COMPONENT_NAME[3])return inventory.state.com_quartz;else if(c==COMPONENT_NAME[4])return inventory.state.com_silver;else if(c==COMPONENT_NAME[5])return inventory.state.com_gum},getConstructStatus(){let s=this.wilderness.construct;if(!isConstructOwned(s))return'default';else if(isConstructCharged(s))return'success';else return'warning'},getConstructStatusText(){let s=this.wilderness.construct;if(!isConstructOwned(s))return s+'未拥有!';else if(isConstructCharged(s))return s+'已充能!';else return s+'已拥有!'},getTreasureStatusText(){let t=this.wilderness.treasure;if(isTreasureOwned(t))return t+'已拥有!';else return t+'未拥有!'},getTreasureStatus(){let t=this.wilderness.treasure;if(isTreasureOwned(t))return'success';else return'default'},clientWidth:()=>gp_store.state.clientWidth,isBrShow(){if(this.clientWidth<this.width2)return true;else return false},isComponentAvatarShow(){if(this.clientWidth>=this.width1)return true;else if(this.clientWidth>=this.width2)return false;else return true},isDeviderShow(){if(this.clientWidth>=this.width1)return true;else if(this.clientWidth>=this.width2)return false;else return true},getOffset(){if(this.isComponentAvatarShow)return[2.2,28.5];else return[-5,0]}},methods:{getBadgeColorClass(){let c=this.wilderness.component;if(c==COMPONENT_NAME[0])return BADGE_COLOR_CLASS[0];else if(c==COMPONENT_NAME[1])return BADGE_COLOR_CLASS[1];else if(c==COMPONENT_NAME[2])return BADGE_COLOR_CLASS[2];else if(c==COMPONENT_NAME[3])return BADGE_COLOR_CLASS[3];else if(c==COMPONENT_NAME[4])return BADGE_COLOR_CLASS[4];else if(c==COMPONENT_NAME[5])return BADGE_COLOR_CLASS[5]}},template:'<Cell :name="wilderness.name" :title="wilderness.name">			<!--<Avatar src="https://i.loli.net/2017/08/21/599a521472424.jpg" />-->			<Tooltip :content="getEvents" transfer max-width="180">				<!--有事件发生时将会有红点-->				<Badge :dot="getEvents!=\'无事件\'"><b>{{wilderness.name}}</b></Badge>			</Tooltip>			<Divider type="vertical" v-if="!isBrShow"/>			<br v-else/>			<Tooltip :content="wilderness.component+\',已拥有: \'+getComponentNum" transfer><!--transfer很重要-->				<Badge :count="getComponentNum" :class-name="getBadgeColorClass()" show-zero :offset="getOffset">					<Avatar size="small" shape="square" :style="{background: getComponentColor}" v-show="isComponentAvatarShow">{{wilderness.component}}</Avatar>				</Badge>			</Tooltip>			<!--装置和宝物-->			<Divider type="vertical"/>			<Tooltip :content="getConstructStatusText" transfer><!--transfer很重要-->				<Badge :status="getConstructStatus" :text="wilderness.construct"/>			</Tooltip>			<Divider type="vertical" v-show="isDeviderShow"/>			<Tooltip :content="getTreasureStatusText" transfer><!--transfer很重要-->				<Tag :color="getTreasureStatus">{{wilderness.treasure}}</Tag>			</Tooltip>		</Cell>'};const WorkshopConstructTag={mixins:[InventoryConstructTag],computed:{isDotShow(){for(var w of wildernessSet){if(w.construct==this.itemName){if(w.events.indexOf(EVENT_LIST[1])!=-1)return true}}return false},eventText(){if(this.isDotShow)return'\n[短暂预视]:本地区装置充能+1';else return''}},methods:{readyToStartConstruct(){if(!isConstructOwned(this.itemName))warning(app,itemName+' : 未取得!');else if(isConstructCharged(this.itemName))info(app,itemName+' : 无需充能启动!');else startConstruct(this.itemName)},itemClicked(){this.readyToStartConstruct()},},template:'<span>			<Tooltip :content="getConstructChargeText+eventText" max-width="200" transfer>				<Badge :dot="isDotShow" :offset=[5,8]><!--添加了地区事件提示-->					<Tag type="dot" :color="getConstructCharge">						<span @click="itemClicked">{{itemName}}</span>					</Tag>				</Badge>			</Tooltip">		</span>'};const WorkshopConstructTagWithoutClickEvent={mixins:[InventoryConstructTag],methods:{itemClicked(){}}};const WorkshopConstructConnectUnit={data(){return{COMPONENT_NAME:COMPONENT_NAME,CONNECT_MAP:CONNECT_MAP,ZONE_COLOR:ZONE_COLOR,BADGE_COLOR_CLASS:BADGE_COLOR_CLASS,undefinedConstructTagName:'无限通路',warpWidth:365}},props:['component'],computed:{getItemColor(){switch(this.component){case COMPONENT_NAME[0]:return ZONE_COLOR[0];case COMPONENT_NAME[1]:return ZONE_COLOR[1];case COMPONENT_NAME[2]:return ZONE_COLOR[2];case COMPONENT_NAME[3]:return ZONE_COLOR[3];case COMPONENT_NAME[4]:return ZONE_COLOR[4];case COMPONENT_NAME[5]:return ZONE_COLOR[5]}},getItemCount(){switch(this.component){case COMPONENT_NAME[0]:return inventory.state.com_lead;case COMPONENT_NAME[1]:return inventory.state.com_silica;case COMPONENT_NAME[2]:return inventory.state.com_wax;case COMPONENT_NAME[3]:return inventory.state.com_quartz;case COMPONENT_NAME[4]:return inventory.state.com_silver;case COMPONENT_NAME[5]:return inventory.state.com_gum}},getComponentConnectPoiont(){if(this.component==COMPONENT_NAME[0])return gp_store.state.connectPoiontLead;else if(this.component==COMPONENT_NAME[1])return gp_store.state.connectPoiontSilica;else if(this.component==COMPONENT_NAME[2])return gp_store.state.connectPoiontWax;else if(this.component==COMPONENT_NAME[3])return gp_store.state.connectPoiontQuartz;else if(this.component==COMPONENT_NAME[4])return gp_store.state.connectPoiontSilver;else if(this.component==COMPONENT_NAME[5])return gp_store.state.connectPoiontGum},connetIconColor(){let c=this.getComponentConnectConstruct();if(isConponentConnected(this.component))return'#19be6b';if(c[1]==undefined){if(isConstructCharged(c[0]))return'#ff9900'}else{if(isConstructCharged(c[0])&&isConstructCharged(c[1]))return'#ff9900'}return'#808695'},clientWidth:()=>gp_store.state.clientWidth,needToWarp(){return this.clientWidth<this.warpWidth}},methods:{getComponentConnectConstruct(){for(var k in CONNECT_MAP){if(this.component==k)return CONNECT_MAP[k]}return undefined},getBadgeColorClass(){let c=this.component;if(c==COMPONENT_NAME[0])return BADGE_COLOR_CLASS[0];else if(c==COMPONENT_NAME[1])return BADGE_COLOR_CLASS[1];else if(c==COMPONENT_NAME[2])return BADGE_COLOR_CLASS[2];else if(c==COMPONENT_NAME[3])return BADGE_COLOR_CLASS[3];else if(c==COMPONENT_NAME[4])return BADGE_COLOR_CLASS[4];else if(c==COMPONENT_NAME[5])return BADGE_COLOR_CLASS[5]},getComponentRegion(){let region="Unknow";for(var w of wildernessSet){if(w.component==this.component)region=w.name}return'产自:'+region},},components:{'workshop-construct-tag':WorkshopConstructTagWithoutClickEvent},template:'<Cell :name="component" :title="component">			<Tooltip content="装置连接点" transfer>				<Icon type="md-git-compare" />&nbsp;{{getComponentConnectPoiont}}			</Tooltip>			<Divider type="vertical"/>			<Tooltip :content="getComponentRegion()" transfer max-width="200">				<Badge :count="getItemCount" :class-name="getBadgeColorClass()" show-zero :offset="[3,0]">					<Avatar shape="circle" :style="{background: getItemColor}">{{component}}</Avatar>				</Badge>			</Tooltip>			<Divider type="vertical" v-if="!needToWarp"/>			<hr v-if="needToWarp">			<workshop-construct-tag :itemName="getComponentConnectConstruct()[0]"/>			<Icon type="md-git-commit" size="20" :color="connetIconColor"/><!--连接图标-->			<template v-if="!!getComponentConnectConstruct()[1]"><!--单回路装置直接连通-->				<workshop-construct-tag :itemName="getComponentConnectConstruct()[1]" />			</template>			<Tooltip transfer content="通向未来" v-else>				<Tag type="dot" color="success" >{{undefinedConstructTagName}}</Tag>			</Tooltip>		</Cell>'};const DiceIcon={props:['num','size'],data(){return{DICE_COLOR:ZONE_COLOR}},computed:{getColor(){if(!this.num)return'#e8eaec';else return this.DICE_COLOR[this.num-1]},getNum(){console.log('填入',this.num);if(!this.num)return this.num;else this.num}},template:'<Avatar :size="size" :style="{background: getColor}">{{num}}</Avatar>'};